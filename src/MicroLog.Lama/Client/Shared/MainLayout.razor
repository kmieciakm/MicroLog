@using Polly

@inherits LayoutComponentBase

@inject IAlertService AlertService
@inject ISnackbar Snackbar

<MudThemeProvider Theme="AppTheme.Theme" />
<MudDialogProvider />
<MudSnackbarProvider />

@if (showThemeManager)
{
    <ThemeManager @ref="ThemeManager"></ThemeManager>
}

<div class="page">
    <MudLayout>
        <MudAppBar Elevation="1" Fixed="true">
            <img src="llama.png" alt="Logo" />
            <MudText Typo="Typo.h5" Class="ml-3">Log Alerting Monitoring and Analysis</MudText>
            <MudSpacer />
        </MudAppBar>

        <MudDrawer Open="false" ClipMode="DrawerClipMode.Always" Anchor="Anchor.Right" PreserveOpenState="true" Elevation="1" Variant="DrawerVariant.Mini">
            <MudNavMenu Class="pt-3">
                <MudNavLink Class="md-1" Href="/" IconColor="Color.Primary" Icon="@Icons.Rounded.Dashboard"></MudNavLink>
                <MudNavLink Class="md-1" Href="/search" IconColor="Color.Primary" Icon="@Icons.Rounded.FilterAlt"></MudNavLink>
                <MudNavLink Class="md-1" Href="/realtimeviewer" IconColor="Color.Primary" Icon="@Icons.Rounded.Timer"></MudNavLink>
                <MudNavLink Class="md-1" Href="/credits" IconColor="Color.Primary" Icon="@Icons.Rounded.Info"></MudNavLink>
            </MudNavMenu>
        </MudDrawer>

        <div class="centered">
            <MudMainContent Class="mud-container-maxwidth-lg" Style="margin-right: 0px !important;">
                <div class="pt-4 pa-3" style="height: 100%">
                    @Body
                </div>
            </MudMainContent>
        </div>
    </MudLayout>
</div>

@code
{
    private bool showThemeManager = false;
    private ThemeManager ThemeManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AlertService.Run();
        AlertService.OnAlert += ShowAlertPopup;
    }

    public void ShowAlertPopup(AlertArgs args)
    {
        Snackbar.Add(args.Log.Message, Severity.Error);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && ThemeManager != null)
        {
            ThemeManager.OnUpdateTheme += () =>
            {
                StateHasChanged();
            };
        }

        base.OnAfterRender(firstRender);
    }
}