@using System.Text.Json
@using JsonFormatting = Newtonsoft.Json.Formatting
@using JsonValue = Newtonsoft.Json.Linq.JValue

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <MudGrid>
                <DetailRow PropertyName="Event Id" Value="@Log.Identity?.EventId" />
                <DetailRow PropertyName="Date" Value="@Log.Timestamp?.ToString()" />
                <DetailRow PropertyName="Message" Value="@Log.Message" />
                <DetailRow PropertyName="Severity" Value="@GetSeverityString(Log)" />
                <DetailRow PropertyName="Error" Value="@(Log.Exception is null ? null : FormatException(Log.Exception))" />
                @foreach (var property in Log.Properties.OrEmptyIfNull())
                {
                    <DetailRow PropertyName="@property.Name" Value="@FormatProperty(property)" />
                }
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public LogItem Log { get; set; }

    public void Close() => MudDialog.Cancel();

    private string FormatException(LogException exception)
        => JsonSerializer.Serialize(exception,
            new JsonSerializerOptions { WriteIndented = true });

    private string FormatProperty(ILogProperty property)
        => JsonValue
            .Parse(property.Value)
            .ToString(JsonFormatting.Indented);

    private string GetSeverityString(LogItem log)
    {   
        if (Enum.TryParse(log.Level, true, out LogLevel level))
        {
            return Enum.GetName<LogLevel>(level);
        }
        return "";
    }
}
