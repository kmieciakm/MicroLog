@page "/realtimeviewer"

@using MicroLog.Core
@using Microsoft.AspNetCore.SignalR.Client

@inherits BasePage
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<MudTextField @bind-Value="messageInput" Label="Test message" Variant="Variant.Text"></MudTextField>
<Spacer />
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Send" Disabled="!IsConnected">Test Hub</MudButton>

<Divider />

<MudTable Items="@logs" FixedHeader="true" Dense="true" Virtualize="true" Height="400px">
    <HeaderContent>
        <MudTh>Time</MudTh>
        <MudTh>Severity</MudTh>
        <MudTh>Message</MudTh>
        <MudTh>Exception</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Time">@context.Timestamp</MudTd>
        <MudTd DataLabel="Severity">@context.LevelName</MudTd>
        <MudTd DataLabel="Message">@context.Message</MudTd>
        @if (context.Exception is not null)
        {
            <MudTd DataLabel="Exception">
                <MudText Typo="Typo.subtitle2">@context.Exception.Type</MudText>
                <MudText Typo="Typo.body1">@context.Exception.Message</MudText>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Exception">-</MudTd>
        }
    </RowTemplate>
</MudTable>

@code {
    private string messageInput;
    private HubConnection hubConnection;
    private List<LogEvent> logs = new List<LogEvent>();

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/loghub"))
            .Build();

        hubConnection.On<LogEvent>("ReceiveLog", (log) =>
        {
            logs.Add(log);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null && messageInput is not null)
        {
            var log = new LogEvent();
            log.Message = messageInput;
            log.Exception = new LogException(new ArgumentNullException("connectionString", "Value cannot be null."));
            await hubConnection.SendAsync("Insert", log);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
