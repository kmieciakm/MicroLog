@page "/realtimeviewer"

@using MicroLog.Core
@using Microsoft.AspNetCore.SignalR.Client

@inherits BasePage
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<MudTextField @bind-Value="messageInput" Label="Log message" Variant="Variant.Text"></MudTextField>
<Spacer />
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Send" Disabled="!IsConnected">Send</MudButton>

<Divider />

<MudSimpleTable Style="overflow-x: auto;">
    <thead>
        <tr>
            <th>Id</th>
            <th>Severity</th>
            <th>Message</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var log in logs)
        {
            <tr>
                <td>@log.Identity.EventId</td>
                <td>@log.Level</td>
                <td>@log.Message</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>

@code {
    private string messageInput;
    private HubConnection hubConnection;
    private List<LogEvent> logs = new List<LogEvent>();

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/loghub"))
            .Build();

        hubConnection.On<LogEvent>("ReceiveLog", (log) =>
        {
            logs.Add(log);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null && messageInput is not null)
        {
            var log = new LogEvent();
            log.Message = messageInput;
            await hubConnection.SendAsync("Insert", log);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
