@page "/realtimeviewer"

@using BlazorDownloadFile
@using Microsoft.AspNetCore.SignalR.Client

@inherits BasePage
@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject ILogsStorage LogsStorage
@inject IBlazorDownloadFileService BlazorDownloadFileService

<MudText Typo="Typo.h3">Real time monitor</MudText>
<Divider />

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Connect" Disabled="IsConnected">Connect</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Disconnect" Disabled="!IsConnected">Disconnect</MudButton>
    </MudItem>
    <MudItem xs="12" sm="6">
        <div class="float-end">
            <UtilityButton Icon="@Icons.Rounded.ClearAll" Tooltip="Clear All" Disabled="IsConnected" OnClick="Clear" />
        </div>
        <div class="float-end mr-2">
            <UtilityButton Icon="@Icons.Rounded.Download" Tooltip="Export" Disabled="IsConnected" OnClick="Export" />
        </div>
        <div class="float-end mr-2">
            <UtilityButton Icon="@Icons.Rounded.Message" Tooltip="Test Hub" Disabled="!IsConnected" OnClick="SendTestLog" />
        </div>
    </MudItem>
</MudGrid>

<Divider />

<MudTable Items="@LogsStorage" FixedHeader="true" Dense="true" Virtualize="true" Height="600px">
    <HeaderContent>
        <MudTh>Time</MudTh>
        <MudTh>Severity</MudTh>
        <MudTh>Message</MudTh>
        <MudTh>Exception</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Time">@context.Timestamp</MudTd>
        <MudTd DataLabel="Severity">
            <MudChip Size="Size.Small" Color=@GetLogLevelColor(@context)>@context.LevelName</MudChip>
        </MudTd>
        <MudTd DataLabel="Message">@context.Message</MudTd>
        @if (context.Exception is not null)
        {
            <MudTd DataLabel="Exception">
                <MudText Typo="Typo.subtitle2">@context.Exception.Type</MudText>
                <MudText Typo="Typo.body1">@context.Exception.Message</MudText>
            </MudTd>
        }
        else
        {
            <MudTd DataLabel="Exception">-</MudTd>
        }
        <MudTd DataLabel="Action">
            <MudIconButton Icon="@Icons.Rounded.Search" Color="Color.Primary" OnClick="() => ShowLogDetails(LogItem.Parse(context))"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private HubConnection _hubConnection;

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    protected override void OnInitialized()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/loghub"))
            .Build();

        _hubConnection.On<LogEvent>("ReceiveLog", (log) =>
        {
            LogsStorage.Add(log);
            StateHasChanged();
        });
    }

    private async Task Connect()
    {
        await _hubConnection.StartAsync();
    }

    private async Task Disconnect()
    {
        await _hubConnection.StopAsync();
    }

    private async Task SendTestLog()
    {
        if (IsConnected)
        {
            var log = new LogEvent()
                {
                    Level = LogLevel.Error,
                    Message = "SignalR Hub connection test",
                    Exception = new LogException()
                    {
                        Source = "LAMA",
                        Type = "LogException",
                        Message = "Test exception message"
                    }
                };
            var enricher = new ValueEnricher("Platform", "Windows 10");
            enricher.Enrich(log);

            await _hubConnection.SendAsync("Insert", log);
        }
    }

    private void Export()
    {
        BlazorDownloadFileService.DownloadFileFromText(
            $"logs_{DateTime.Now.ToShortDateString()}.json",
            LogsStorage.ToJson(),
            "application/octet-stream");
    }

    private void Clear()
    {
        LogsStorage.Clear();
    }

    public static Color GetLogLevelColor(LogEvent logEvent) => logEvent.Level switch
    {
        >= LogLevel.Error => Color.Error,
        LogLevel.Warning => Color.Warning,
        LogLevel.Information => Color.Primary,
        <= LogLevel.Debug => Color.Dark
    };

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await Disconnect();
            await _hubConnection.DisposeAsync();
        }
    }
}
