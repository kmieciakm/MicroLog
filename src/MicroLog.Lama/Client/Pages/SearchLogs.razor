@page "/search"

@using GraphQL
@using GraphQL.Client.Http
@using GraphQL.Client.Serializer.Newtonsoft
@using System.Text.Json

@inherits BasePage

@inject NavigationManager NavigationManager

<div class="d-flex flex-column" style="height: 100%">
    <div class="w-100">
        <MudText Typo="Typo.h3">Filters</MudText>
        <Divider />
    </div>
    <div class="flex-grow-1">
        <MudGrid Style="height: 100%; min-height: 600px; max-height: 85vh;">
            <MudItem xs="12" md="2" Style="height: 100%;">
                <MudPaper Width="100%" Height="100%" Class="d-flex flex-column">
                    <MudList Clickable="true" Class="flex-grow-1" Style="overflow: auto;">
                        @foreach (var filter in Filters)
                        {
                            <MudListItem Text="@filter.Name" Class="@(CurrentFilterName == filter.Name ? "mud-primary" : "")"
                                            OnClick="e => LoadFilter(filter)" />
                            <MudDivider />
                        }
                    </MudList>
                    <MudButton Class="rounded-0 rounded-sm-b p-3" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true"
                               OnClick="e => newFilterDialog.OpenDialog()">Create new</MudButton>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="4" Style="height: 100%;">
                <MudPaper Width="100%" Height="100%" Class="d-flex flex-column">
                    <ContentEditable @ref="queryContentField" CSSClass="editable flex-grow-1" ValueChanged="() => StateHasChanged()" />
                    <div class="d-flex">
                        <MudButton Class="rounded-0 p-3 w-50" Variant="Variant.Filled" Color="Color.Primary"
                                   OnClick="e => SaveFilter()">Save</MudButton>
                        <MudButton Class="rounded-0 p-3 w-50" Variant="Variant.Filled" Color="Color.Success"
                                   OnClick="e => ExecuteQuery()">Run</MudButton>
                    </div>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" md="6" Style="height: 100%;">
                <MudPaper Width="100%" Height="100%">
                    <LogsTable Logs="@Logs"></LogsTable>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </div>

    <FormDialog @ref="newFilterDialog" ButtonText="Create" HeaderText="Create new Filter"
                OnSubmit="() => CreateFilter()">
        <MudForm>
            <MudTextField Label="Name" @bind-Value="NewFilter.Name" Variant="Variant.Text"></MudTextField>
        </MudForm>
    </FormDialog>
</div>

@code {
    private ContentEditable queryContentField;
    private FormDialog newFilterDialog;
    private string CurrentFilterName { get; set; }
    private Filter NewFilter { get; set; } = new Filter();
    private List<Filter> Filters { get; set; } = new List<Filter>();
    private List<LogItem> Logs { get; set; } = new List<LogItem>()
    {
        new LogItem() { Level = LogLevel.Critical.ToString(), Message = "SERVER DOWN", Timestamp = DateTime.Now },
        new LogItem() { Level = LogLevel.Error.ToString(), Message = "Request https://google.pl 505 status", Timestamp = DateTime.Now },
        new LogItem() { Level = LogLevel.Warning.ToString(), Message = "Request https://google.pl taked longer then 10 s", Timestamp = DateTime.Now },
        new LogItem() { Level = LogLevel.Information.ToString(), Message = "Order processed correctly. Order response id: 51-132-1342-21", Timestamp = DateTime.Now },
        new LogItem() { Level = LogLevel.Debug.ToString(), Message = "Entering IOrderProcessingService", Timestamp = DateTime.Now }
    };

    protected override void OnInitialized()
    {
        Filter defaultFilter = new()
            {
                Name = "Last 3 errors",
                Query = @"query {
    logs (
        take: 3
        order: { level: DESC }
        where: {
            level: { in: [CRITICAL, ERROR] }
        }
    ) {
        totalCount,
        items {
            identity {
                eventId
            },
            timestamp,
            message,
            level,
            levelName,
            exception {
                type,
                source,
                message,
                innerException {
                    message
                }
            },
            properties {
                name,
                value
            }
        }
    }
}"
            };
        Filters.Add(defaultFilter);
        base.OnInitialized();
    }

    private void LoadFilter(Filter filter)
    {
        CurrentFilterName = filter.Name;
        queryContentField.SetValue(filter.Query);
        StateHasChanged();
    }

    private void CreateFilter()
    {
        Filters.Add(new Filter()
            {
                Name = NewFilter.Name,
                Query = NewFilter.Query
            });
        NewFilter = new Filter();
        StateHasChanged();
    }

    private void SaveFilter()
    {
        var query = queryContentField.Value;
        var oldFilter = Filters.FirstOrDefault(f => f.Name == CurrentFilterName);
        if (oldFilter is not null)
        {
            oldFilter.Query = query;
        }
        StateHasChanged();
    }

    private async Task ExecuteQuery()
    {
        var query = queryContentField.Value;
        var graphQLOptions = new GraphQLHttpClientOptions
            {
                EndPoint = NavigationManager.ToAbsoluteUri("/api")
            };
        var graphQLClient = new GraphQLHttpClient(graphQLOptions, new NewtonsoftJsonSerializer());

        var request = new GraphQLRequest
            {
                Query = query.Replace("\n", " ")
            };

        var graphQLResponse = await graphQLClient
            .SendQueryAsync<FilterResponse>(request)
            .ConfigureAwait(false);

        Logs = graphQLResponse.Data.Logs.Items;
    }
}