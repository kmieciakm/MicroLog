@page "/search"

@using GraphQL
@using GraphQL.Client.Http
@using GraphQL.Client.Serializer.Newtonsoft
@using System.Text.Json

@inherits BasePage

@inject NavigationManager NavigationManager

<div class="d-flex flex-column" style="height: 100%">
    <div class="w-100">
        <MudText Typo="Typo.h2">Filters</MudText>
        <Divider />
    </div>
    <div class="flex-grow-1">
        <MudGrid Style="height: 100%; min-height: 600px">
            <MudItem sm="12" md="2" Style="height: 100%;">
                <MudPaper Width="100%" Height="100%">
                    <MudList Clickable="true">
                        @foreach(var filter in Filters)
                        {
                            <MudListItem Text="@filter.Name" OnClick="e => LoadFilter(filter)" />
                            <MudDivider />
                        }
                    </MudList>
                </MudPaper>
             </MudItem>
            <MudItem sm="12" md="4">
                <MudPaper Width="100%" Height="100%">
                    <ContentEditable @ref="queryContentField" Value="@CurrentFilter.Query" CSSClass="editable" />
                </MudPaper>
                <div>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="e => ExecuteQuery()">Run</MudButton>
                </div>
            </MudItem>
            <MudItem sm="12" md="6">
                <MudPaper Width="100%" Height="100%">
                    @foreach(var log in Logs)
                    {
                        <div>@log.Message</div>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </div>
</div>

@code {
    private IEnumerable<LogItem> Logs { get; set; } = new List<LogItem>();
    private ContentEditable queryContentField;
    private Filter CurrentFilter { get; set; } = new Filter() { Query = string.Empty };
    private IEnumerable<Filter> Filters { get; set; } = new List<Filter>()
    {
        new()
        {
            Name = "Last 3 errors",
            Query = @"query {
    logs (
        take: 3
        order: { level: DESC }
        where: {
            level: { in: [CRITICAL, ERROR] }
        }
    ) {
        totalCount,
        items {
            identity {
                eventId
            },
            timestamp,
            message,
            level,
            levelName,
            exception {
                type,
                source,
                message,
                innerException {
                    message
                }
            },
            properties {
                name,
                value
            }
        }
    }
}"
        }
    };

    private void LoadFilter(Filter filter)
    {
        queryContentField.SetValue(filter.Query);
        CurrentFilter = filter;
    }

    private async Task ExecuteQuery()
    {
        var query = queryContentField.Value;
        var graphQLOptions = new GraphQLHttpClientOptions
        {
            EndPoint = NavigationManager.ToAbsoluteUri("/api")
        };
        var graphQLClient = new GraphQLHttpClient(graphQLOptions, new NewtonsoftJsonSerializer());

        var request = new GraphQLRequest
        {
            Query = query.Replace("\n", " ")
        };

        var graphQLResponse = await graphQLClient
            .SendQueryAsync<FilterResponse>(request)
            .ConfigureAwait(false);

        Logs = graphQLResponse.Data.Logs.Items;
    }
}